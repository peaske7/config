# zmodload zsh/zprof
# ----------------------------
# Added by Zinit's installer
# ----------------------------
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
  print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
  command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
  command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
    print -P "%F{33} %F{34}Installation successful.%f%b" || \
    print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# ----------------------------
# standard
# ----------------------------
export ZSHRC=~/.zshrc
export HISTFILE=~/.zsh_history
export HISTSIZE=1000
export SAVEHIST=1000
export SHELL_SESSIONS_DISABLE=1
setopt SHARE_HISTORY

setopt auto_cd # prefixes directory changes with `cd` 
setopt auto_list # automatically list choices
setopt auto_menu # show completion menu
setopt auto_param_slash	# if completed param is dir, add slash at end
setopt menu_complete # don't autoselect first completion entry
setopt extended_history # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE

# allow zsh to take flight (enable completions)
autoload -Uz compinit
compinit -i

# completions
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' # case insensitive tab completion

# ----------------------------
# Zinit plugins
# ----------------------------
zinit wait lucid blockf light-mode for \
  @'zsh-users/zsh-completions' \
  @'zsh-users/zsh-autosuggestions' \
  @'zdharma-continuum/fast-syntax-highlighting' \
  @'hlissner/zsh-autopair'

# mcfly
zinit ice lucid wait"0a" from"gh-r" as"program" atload'eval "$(mcfly init zsh)"'
zinit light cantino/mcfly
MCFLY_KEY_SCHEME=vim
MCFLY_DISABLE_MENU=TRUE

# we use zsh-vi-mode instead of OMZP::vi-mode because the '^R' keybindings 
# overlaps with mcfly and breaks one or the other.
zinit ice depth"1" lucid
zinit light jeffreytse/zsh-vi-mode
zinit ice wait silent
ZVM_LAZY_KEYBINDINGS=false
ZVM_VI_INSERT_ESCAPE_BINDKEY=jk

# starship
zinit ice as"command" from"gh-r" \
  atclone"./starship init zsh > init.zsh; ./starship completions zsh > _starship" \
  atpull"%atclone" src"init.zsh"
zinit light starship/starship

# zoxide
zinit ice lucid wait"0a" depth"1" from="gh-r" as="program" atload'eval "$(zoxide init zsh)"'
zinit light ajeetdsouza/zoxide

# ----------------------------
# functions and aliases
# ----------------------------
if [[ -r ~/.aliasrc ]]; then
  . ~/.aliasrc
fi

# ----------------------------
# speed hacks
# ----------------------------
# automatically compiles zshrc for faster startup time
# modified https://zenn.dev/fuzmare/articles/zsh-source-zcompile-all
function source {
  if [[ $1 == $ZSHRC ]]; then
    builtin source $1
    ensure_zcompiled $1 $2
  else
    builtin source $1
  fi
}

function ensure_zcompiled {
  local compiled="$1.zwc"
  if [[ ! -r "$compiled" || "$1" -nt "$compiled" ]]; then
    # show message if `--verbose` flag is set
    if [[ $2 == "--verbose" ]]; then
      echo "compiling $1"
    fi
    zcompile $1
  fi
}

ensure_zcompiled ~/.zshrc

# ----------------------------
# configs for native deps
# ----------------------------
# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# openssl
BREW_PATH="/opt/homebrew"
export PATH="$BREW_PATH/opt/cyrus-sasl@2.1.27/sbin:$PATH"
export PATH="$BREW_PATH/opt/openssl@1.1/bin:$PATH"
export LDFLAGS="-L/$BREW_PATH/opt/openssl@1.1/lib/ -L/$BREW_PATH/opt/cyrus-sasl/lib"
export CPPFLAGS="-I/$BREW_PATH/opt/openssl@1.1/include -I/$BREW_PATH/opt/cyrus-sasl/include"
export PKG_CONFIG_PATH="/$BREW_PATH/opt/cyrus-sasl/lib/pkgconfig"

# pnpm
export PNPM_HOME="/$HOME/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac

# rust
export PATH="$HOME/.cargo/bin:$PATH"
export PATH="$HOME/.cargo/env:$PATH"
source $HOME/.cargo/env 

# java
export ANDROID_HOME=$HOME/Library/Android/sdk
export ANDROID_SDK=$ANDROID_HOME
export ANDROID_NDK_HOME="$BREW_PATH/share/android-ndk"
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools
export PATH="$BREW_PATH/opt/openjdk@11/bin:$PATH"
export PATH="$BREW_PATH/opt/llvm/bin:$PATH"
export PATH="$BREW_PATH/opt/cyrus-sasl/sbin:$PATH"
export JAVA_HOME="$BREW_PATH/opt/openjdk@11"

# pip
export PATH="$PATH:$HOME/.local/bin"

# lua
export PATH=$PATH:$HOME/.config/lsp/lua-language-server/bin

# brew
eval "$($BREW_PATH/bin/brew shellenv)"

# moonrepo
export PATH="$HOME/.moon/bin:$PATH"

# gpg key tool
export GPG_TTY=$(tty)

# lazy Google Cloud SDK
function lazy_gcloud {
  unset -f gcloud

  if [ -f "$HOME/google-cloud-sdk/path.zsh.inc" ]; then 
    . "$HOME/google-cloud-sdk/path.zsh.inc"; 
  fi
  if [ -f "$HOME/google-cloud-sdk/completion.zsh.inc" ]; then 
    . "$HOME/google-cloud-sdk/completion.zsh.inc"; 
  fi
}
function gcloud { lazy_gcloud; gcloud "$@"; }

# llvm
export PATH="$BREW_PATH/opt/llvm/bin:$PATH"

# asdf
export PATH="${ASDF_DATA_DIR:-$HOME/.asdf}/shims:$PATH"
fpath=(${ASDF_DATA_DIR:-$HOME/.asdf}/completions $fpath)

# conda
__conda_setup="$('/opt/anaconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/opt/anaconda3/etc/profile.d/conda.sh" ]; then
        . "/opt/anaconda3/etc/profile.d/conda.sh"
    else
        export PATH="/opt/anaconda3/bin:$PATH"
    fi
fi
unset __conda_setup

# moon
export PATH="$HOME/.moon/bin:$PATH"

# proto
export PROTO_HOME="$HOME/.proto"
export PATH="$PROTO_HOME/shims:$PROTO_HOME/bin:$PATH"

# pnpm
export PNPM_HOME="$HOME/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# windsurf
export PATH="$HOME/.codeium/windsurf/bin:$PATH"

# claude code
# alias claude="/Users/jay/.claude/local/claude"

# The following lines have been added by Docker Desktop to enable Docker CLI completions.
fpath=(/Users/jay/.docker/completions $fpath)
autoload -Uz compinit
compinit
# End of Docker CLI completions

# bun completions
[ -s "/Users/jay/.bun/_bun" ] && source "/Users/jay/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# uv
eval "$(uv generate-shell-completion zsh)"
eval "$(uvx --generate-shell-completion zsh)"

# use orbstack
export DOCKER_HOST="unix://$HOME/.orbstack/run/docker.sock"

# zprof
